{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["const ENDPOINT_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\n\ninterface BucketInfo {\n  bucket?: string | null;\n  err?: string;\n}\n\nexport function isUrlFromBucket(fileUrl: string, bucketName: string, baseUrl = ''): boolean {\n  const url = new URL(fileUrl);\n\n  // Check if the file URL is using a base URL (e.g. a CDN).\n  // In this case do not sign the URL.\n  if (baseUrl) {\n    return false;\n  }\n\n  const { bucket } = getBucketFromAwsUrl(fileUrl);\n\n  if (bucket) {\n    return bucket === bucketName;\n  }\n\n  // File URL might be of an S3-compatible provider. (or an invalid URL)\n  // In this case, check if the bucket name appears in the URL host or path.\n  // e.g. https://minio.example.com/bucket-name/object-key\n  // e.g. https://bucket.nyc3.digitaloceanspaces.com/folder/img.png\n  return url.host.startsWith(`${bucketName}.`) || url.pathname.includes(`/${bucketName}/`);\n}\n\n/**\n * Parse the bucket name from a URL.\n * See all URL formats in https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html\n *\n * @param {string} fileUrl - the URL to parse\n * @returns {object} result\n * @returns {string} result.bucket - the bucket name\n * @returns {string} result.err - if any\n */\nfunction getBucketFromAwsUrl(fileUrl: string): BucketInfo {\n  const url = new URL(fileUrl);\n\n  // S3://<bucket-name>/<key>\n  if (url.protocol === 's3:') {\n    const bucket = url.host;\n\n    if (!bucket) {\n      return { err: `Invalid S3 url: no bucket: ${url}` };\n    }\n    return { bucket };\n  }\n\n  if (!url.host) {\n    return { err: `Invalid S3 url: no hostname: ${url}` };\n  }\n\n  const matches = url.host.match(ENDPOINT_PATTERN);\n  if (!matches) {\n    return { err: `Invalid S3 url: hostname does not appear to be a valid S3 endpoint: ${url}` };\n  }\n\n  const prefix = matches[1];\n  // https://s3.amazonaws.com/<bucket-name>\n  if (!prefix) {\n    if (url.pathname === '/') {\n      return { bucket: null };\n    }\n\n    const index = url.pathname.indexOf('/', 1);\n\n    // https://s3.amazonaws.com/<bucket-name>\n    if (index === -1) {\n      return { bucket: url.pathname.substring(1) };\n    }\n\n    // https://s3.amazonaws.com/<bucket-name>/\n    if (index === url.pathname.length - 1) {\n      return { bucket: url.pathname.substring(1, index) };\n    }\n\n    // https://s3.amazonaws.com/<bucket-name>/key\n    return { bucket: url.pathname.substring(1, index) };\n  }\n\n  // https://<bucket-name>.s3.amazonaws.com/\n  return { bucket: prefix.substring(0, prefix.length - 1) };\n}\n","import type { ReadStream } from \"node:fs\";\nimport { getOr } from \"lodash/fp\";\nimport AWS from \"aws-sdk\";\nimport { isUrlFromBucket } from \"./utils\";\n\ninterface File {\n  name: string;\n  alternativeText?: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  formats?: Record<string, unknown>;\n  hash: string;\n  ext?: string;\n  mime: string;\n  size: number;\n  url: string;\n  previewUrl?: string;\n  path?: string;\n  provider?: string;\n  provider_metadata?: Record<string, unknown>;\n  stream?: ReadStream;\n  buffer?: Buffer;\n}\n\n// TODO V5: Migrate to aws-sdk v3\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nrequire(\"aws-sdk/lib/maintenance_mode_message\").suppress = true;\n\nfunction hasUrlProtocol(url: string) {\n  // Regex to test protocol like \"http://\", \"https://\"\n  return /^\\w*:\\/\\//.test(url);\n}\n\ninterface InitOptions extends Partial<AWS.S3.ClientConfiguration> {\n  baseUrl?: string;\n  rootPath?: string;\n  s3Options: AWS.S3.ClientConfiguration & {\n    params: {\n      Bucket: string; // making it required\n      ACL?: string;\n      signedUrlExpires?: string;\n    };\n  };\n}\n\nexport default {\n  init({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) {\n    if (Object.keys(legacyS3Options).length > 0) {\n      process.emitWarning(\n        \"S3 configuration options passed at root level of the plugin's providerOptions is deprecated and will be removed in a future release. Please wrap them inside the 's3Options:{}' property.\"\n      );\n    }\n\n    const config = { ...s3Options, ...legacyS3Options };\n\n    const S3 = new AWS.S3({\n      apiVersion: \"2006-03-01\",\n      ...config,\n    });\n\n    const filePrefix = rootPath ? `${rootPath.replace(/\\/+$/, \"\")}/` : \"\";\n\n    const getFileKey = (file: File) => {\n      const date = new Date();\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, \"0\");\n      const day = String(date.getDate()).padStart(2, \"0\");\n      const time = String(date.getTime()); // unix epoch\n\n      const path = file.path ? `${file.path}/` : \"\";\n      // Construct the file key with the year/month/day/time structure\n      const structuredPath = `${year}/${month}/${day}/${time}/`;\n\n      return `${filePrefix}${structuredPath}${path}${file.hash}${file.ext}`;\n    };\n\n    const ACL = getOr(\"public-read\", [\"params\", \"ACL\"], config);\n\n    const upload = (file: File, customParams = {}): Promise<void> =>\n      new Promise((resolve, reject) => {\n        const fileKey = getFileKey(file);\n\n        if (!file.stream && !file.buffer) {\n          reject(new Error(\"Missing file stream or buffer\"));\n          return;\n        }\n\n        const params = {\n          Key: fileKey,\n          Bucket: config.params.Bucket,\n          Body: file.stream || file.buffer,\n          ACL,\n          ContentType: file.mime,\n          ...customParams,\n        };\n\n        const onUploaded = (\n          err: Error,\n          data: AWS.S3.ManagedUpload.SendData\n        ) => {\n          if (err) {\n            return reject(err);\n          }\n\n          // set the bucket file url\n          if (baseUrl) {\n            // Construct the url with the baseUrl\n            file.url = `${baseUrl}/${fileKey}`;\n          } else {\n            // Add the protocol if it is missing\n            // Some providers like DigitalOcean Spaces return the url without the protocol\n            file.url = hasUrlProtocol(data.Location)\n              ? data.Location\n              : `https://${data.Location}`;\n          }\n          (file as any).key = fileKey;\n          resolve();\n        };\n\n        S3.upload(params, onUploaded);\n      });\n\n    return {\n      isPrivate() {\n        return ACL === \"private\";\n      },\n      async getSignedUrl(file: File): Promise<{ url: string }> {\n        // Do not sign the url if it does not come from the same bucket.\n        if (!isUrlFromBucket(file.url, config.params.Bucket, baseUrl)) {\n          return { url: file.url };\n        }\n\n        const signedUrlExpires: string = getOr(\n          15 * 60,\n          [\"params\", \"signedUrlExpires\"],\n          config\n        ); // 15 minutes\n\n        return new Promise((resolve, reject) => {\n          const fileKey = getFileKey(file);\n\n          S3.getSignedUrl(\n            \"getObject\",\n            {\n              Bucket: config.params.Bucket,\n              Key: fileKey,\n              Expires: parseInt(signedUrlExpires, 10),\n            },\n            (err, url) => {\n              if (err) {\n                return reject(err);\n              }\n              resolve({ url });\n            }\n          );\n        });\n      },\n      uploadStream(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      upload(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      delete(file: File, customParams = {}): Promise<void> {\n        return new Promise((resolve, reject) => {\n          // delete file on S3 bucket\n          const key = baseUrl\n            ? file.url.split(baseUrl)[1]?.substring(1)\n            : undefined;\n          S3.deleteObject(\n            {\n              Key: key ?? file.name,\n              Bucket: config.params.Bucket,\n              ...customParams,\n            },\n            (err) => {\n              if (err) {\n                return reject(err);\n              }\n\n              resolve();\n            }\n          );\n        });\n      },\n    };\n  },\n};\n"],"names":["index"],"mappings":";;AAAA,MAAM,mBAAmB;AAOlB,SAAS,gBAAgB,SAAiB,YAAoB,UAAU,IAAa;AACpF,QAAA,MAAM,IAAI,IAAI,OAAO;AAI3B,MAAI,SAAS;AACJ,WAAA;AAAA,EACT;AAEA,QAAM,EAAE,OAAA,IAAW,oBAAoB,OAAO;AAE9C,MAAI,QAAQ;AACV,WAAO,WAAW;AAAA,EACpB;AAMA,SAAO,IAAI,KAAK,WAAW,GAAG,UAAU,GAAG,KAAK,IAAI,SAAS,SAAS,IAAI,UAAU,GAAG;AACzF;AAWA,SAAS,oBAAoB,SAA6B;AAClD,QAAA,MAAM,IAAI,IAAI,OAAO;AAGvB,MAAA,IAAI,aAAa,OAAO;AAC1B,UAAM,SAAS,IAAI;AAEnB,QAAI,CAAC,QAAQ;AACX,aAAO,EAAE,KAAK,8BAA8B,GAAG,GAAG;AAAA,IACpD;AACA,WAAO,EAAE,OAAO;AAAA,EAClB;AAEI,MAAA,CAAC,IAAI,MAAM;AACb,WAAO,EAAE,KAAK,gCAAgC,GAAG,GAAG;AAAA,EACtD;AAEA,QAAM,UAAU,IAAI,KAAK,MAAM,gBAAgB;AAC/C,MAAI,CAAC,SAAS;AACZ,WAAO,EAAE,KAAK,uEAAuE,GAAG,GAAG;AAAA,EAC7F;AAEM,QAAA,SAAS,QAAQ,CAAC;AAExB,MAAI,CAAC,QAAQ;AACP,QAAA,IAAI,aAAa,KAAK;AACjB,aAAA,EAAE,QAAQ;IACnB;AAEA,UAAMA,SAAQ,IAAI,SAAS,QAAQ,KAAK,CAAC;AAGzC,QAAIA,WAAU,IAAI;AAChB,aAAO,EAAE,QAAQ,IAAI,SAAS,UAAU,CAAC;IAC3C;AAGA,QAAIA,WAAU,IAAI,SAAS,SAAS,GAAG;AACrC,aAAO,EAAE,QAAQ,IAAI,SAAS,UAAU,GAAGA,MAAK;IAClD;AAGA,WAAO,EAAE,QAAQ,IAAI,SAAS,UAAU,GAAGA,MAAK;EAClD;AAGO,SAAA,EAAE,QAAQ,OAAO,UAAU,GAAG,OAAO,SAAS,CAAC;AACxD;AC1DA,QAAQ,sCAAsC,EAAE,WAAW;AAE3D,SAAS,eAAe,KAAa;AAE5B,SAAA,YAAY,KAAK,GAAG;AAC7B;AAcA,MAAe,QAAA;AAAA,EACb,KAAK,EAAE,SAAS,UAAU,WAAW,GAAG,mBAAgC;AACtE,QAAI,OAAO,KAAK,eAAe,EAAE,SAAS,GAAG;AACnC,cAAA;AAAA,QACN;AAAA,MAAA;AAAA,IAEJ;AAEA,UAAM,SAAS,EAAE,GAAG,WAAW,GAAG,gBAAgB;AAE5C,UAAA,KAAK,IAAI,IAAI,GAAG;AAAA,MACpB,YAAY;AAAA,MACZ,GAAG;AAAA,IAAA,CACJ;AAEK,UAAA,aAAa,WAAW,GAAG,SAAS,QAAQ,QAAQ,EAAE,CAAC,MAAM;AAE7D,UAAA,aAAa,CAAC,SAAe;AAC3B,YAAA,2BAAW;AACX,YAAA,OAAO,KAAK;AACZ,YAAA,QAAQ,OAAO,KAAK,SAAA,IAAa,CAAC,EAAE,SAAS,GAAG,GAAG;AACnD,YAAA,MAAM,OAAO,KAAK,QAAS,CAAA,EAAE,SAAS,GAAG,GAAG;AAClD,YAAM,OAAO,OAAO,KAAK,QAAS,CAAA;AAElC,YAAM,OAAO,KAAK,OAAO,GAAG,KAAK,IAAI,MAAM;AAErC,YAAA,iBAAiB,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,IAAI;AAE/C,aAAA,GAAG,UAAU,GAAG,cAAc,GAAG,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG;AAAA,IAAA;AAGrE,UAAM,MAAM,MAAM,eAAe,CAAC,UAAU,KAAK,GAAG,MAAM;AAEpD,UAAA,SAAS,CAAC,MAAY,eAAe,OACzC,IAAI,QAAQ,CAAC,SAAS,WAAW;AACzB,YAAA,UAAU,WAAW,IAAI;AAE/B,UAAI,CAAC,KAAK,UAAU,CAAC,KAAK,QAAQ;AACzB,eAAA,IAAI,MAAM,+BAA+B,CAAC;AACjD;AAAA,MACF;AAEA,YAAM,SAAS;AAAA,QACb,KAAK;AAAA,QACL,QAAQ,OAAO,OAAO;AAAA,QACtB,MAAM,KAAK,UAAU,KAAK;AAAA,QAC1B;AAAA,QACA,aAAa,KAAK;AAAA,QAClB,GAAG;AAAA,MAAA;AAGC,YAAA,aAAa,CACjB,KACA,SACG;AACH,YAAI,KAAK;AACP,iBAAO,OAAO,GAAG;AAAA,QACnB;AAGA,YAAI,SAAS;AAEX,eAAK,MAAM,GAAG,OAAO,IAAI,OAAO;AAAA,QAAA,OAC3B;AAGA,eAAA,MAAM,eAAe,KAAK,QAAQ,IACnC,KAAK,WACL,WAAW,KAAK,QAAQ;AAAA,QAC9B;AACC,aAAa,MAAM;AACZ;MAAA;AAGP,SAAA,OAAO,QAAQ,UAAU;AAAA,IAAA,CAC7B;AAEI,WAAA;AAAA,MACL,YAAY;AACV,eAAO,QAAQ;AAAA,MACjB;AAAA,MACA,MAAM,aAAa,MAAsC;AAEnD,YAAA,CAAC,gBAAgB,KAAK,KAAK,OAAO,OAAO,QAAQ,OAAO,GAAG;AACtD,iBAAA,EAAE,KAAK,KAAK;QACrB;AAEA,cAAM,mBAA2B;AAAA,UAC/B,KAAK;AAAA,UACL,CAAC,UAAU,kBAAkB;AAAA,UAC7B;AAAA,QAAA;AAGF,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAChC,gBAAA,UAAU,WAAW,IAAI;AAE5B,aAAA;AAAA,YACD;AAAA,YACA;AAAA,cACE,QAAQ,OAAO,OAAO;AAAA,cACtB,KAAK;AAAA,cACL,SAAS,SAAS,kBAAkB,EAAE;AAAA,YACxC;AAAA,YACA,CAAC,KAAK,QAAQ;AACZ,kBAAI,KAAK;AACP,uBAAO,OAAO,GAAG;AAAA,cACnB;AACQ,sBAAA,EAAE,KAAK;AAAA,YACjB;AAAA,UAAA;AAAA,QACF,CACD;AAAA,MACH;AAAA,MACA,aAAa,MAAY,eAAe,IAAI;AACnC,eAAA,OAAO,MAAM,YAAY;AAAA,MAClC;AAAA,MACA,OAAO,MAAY,eAAe,IAAI;AAC7B,eAAA,OAAO,MAAM,YAAY;AAAA,MAClC;AAAA,MACA,OAAO,MAAY,eAAe,IAAmB;AACnD,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEhC,gBAAA,MAAM,UACR,KAAK,IAAI,MAAM,OAAO,EAAE,CAAC,GAAG,UAAU,CAAC,IACvC;AACD,aAAA;AAAA,YACD;AAAA,cACE,KAAK,OAAO,KAAK;AAAA,cACjB,QAAQ,OAAO,OAAO;AAAA,cACtB,GAAG;AAAA,YACL;AAAA,YACA,CAAC,QAAQ;AACP,kBAAI,KAAK;AACP,uBAAO,OAAO,GAAG;AAAA,cACnB;AAEQ;YACV;AAAA,UAAA;AAAA,QACF,CACD;AAAA,MACH;AAAA,IAAA;AAAA,EAEJ;AACF;"}